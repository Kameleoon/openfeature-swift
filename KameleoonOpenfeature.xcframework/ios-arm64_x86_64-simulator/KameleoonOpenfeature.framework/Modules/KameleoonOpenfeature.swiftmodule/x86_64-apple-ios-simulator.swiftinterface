// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name KameleoonOpenfeature
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Combine
import Foundation
@_exported import KameleoonOpenfeature
import OpenFeature
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import kameleoonClient
@_hasMissingDesignatedInitializers final public class KameleoonProvider : OpenFeature.FeatureProvider {
  final public var hooks: [any OpenFeature.Hook] {
    get
  }
  final public var metadata: any OpenFeature.ProviderMetadata {
    get
  }
  convenience public init(siteCode: Swift.String, visitorCode: Swift.String? = nil, config: kameleoonClient.KameleoonClientConfig? = nil) throws
  final public func getBooleanEvaluation(key: Swift.String, defaultValue: Swift.Bool, context: (any OpenFeature.EvaluationContext)?) throws -> OpenFeature.ProviderEvaluation<Swift.Bool>
  final public func getStringEvaluation(key: Swift.String, defaultValue: Swift.String, context: (any OpenFeature.EvaluationContext)?) throws -> OpenFeature.ProviderEvaluation<Swift.String>
  final public func getIntegerEvaluation(key: Swift.String, defaultValue: Swift.Int64, context: (any OpenFeature.EvaluationContext)?) throws -> OpenFeature.ProviderEvaluation<Swift.Int64>
  final public func getDoubleEvaluation(key: Swift.String, defaultValue: Swift.Double, context: (any OpenFeature.EvaluationContext)?) throws -> OpenFeature.ProviderEvaluation<Swift.Double>
  final public func getObjectEvaluation(key: Swift.String, defaultValue: OpenFeature.Value, context: (any OpenFeature.EvaluationContext)?) throws -> OpenFeature.ProviderEvaluation<OpenFeature.Value>
  final public func initialize(initialContext: (any OpenFeature.EvaluationContext)?)
  final public func onContextSet(oldContext: (any OpenFeature.EvaluationContext)?, newContext: any OpenFeature.EvaluationContext)
  final public func observe() -> Combine.AnyPublisher<OpenFeature.ProviderEvent, Swift.Never>
  @objc deinit
}
public struct DataType {
  public static let variableKey: Swift.String
  public static let conversion: Swift.String
  public static let customData: Swift.String
  public static func makeConversion(goalId: Swift.Int, revenue: Swift.Double = 0.0) -> OpenFeature.Value
  public static func makeCustomData(id: Swift.Int, values: [Swift.String]) -> OpenFeature.Value
  public static func makeCustomData(id: Swift.Int, values: Swift.String...) -> OpenFeature.Value
}
public struct CustomDataType {
  public static let index: Swift.String
  public static let values: Swift.String
}
public struct ConversionType {
  public static let goalId: Swift.String
  public static let revenue: Swift.String
}
